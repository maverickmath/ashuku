#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright muflax <mail@muflax.com>, 2009
# License: GNU GPL 3 <http://www.gnu.org/copyleft/gpl.html>

import math, os.path, re, shutil, sys, tempfile, unicodedata
from datetime import datetime, timedelta, time

try:
    import yaml
except ImportError:
    print("Error: Couldn't load PyYAML.")
    sys.exit(1)
try:
    from yaml import CLoader as Loader
    from yaml import CDumper as Dumper
except ImportError:
    from yaml import Loader, Dumper

PROFILE = 0
if PROFILE:
    import cProfile as profile
    import pstats

colors = {"none":'',
          "black":'\033[0;30m',
          "red":'\033[0;31m',
          "green":'\033[0;32m',
          "brown":"\033[0;33m",
          "blue":"\033[0;34m",\
          "purple":"\033[0;35m",
          "cyan":"\033[0;36m",
          "light_grey":"\033[0;37m",
          "dark_grey":"\033[1;30m",
          "light_red":"\033[1;31m",
          "light_green":"\033[1;32m",
          "yellow":"\033[1;33m",
          "light_blue":"\033[1;34m",
          "light_purple":"\033[1;35m",
          "light_cyan":"\033[1;36m",
          "white":"\033[1;37m",
          "reset":"\033[0m", 
         }

class Ashuku:
    # regex to match the time representation in the data
    time_re = re.compile("^((?P<hour>\d+)h)?((?P<min>\d+)m)?((?P<sec>\d+)s)?$")
    # all possible attribute types and commands
    types = {"cumulative", "quantitative", "qualitative"}
    commands = {"add", "correlate", "graph", "show", "undo"}

    # cached lengths
    length = {}

    def __init__(self, config_path):
        config = self.read_config(config_path)
        # mandatory stuff
        try:
            self.attributes = config["attributes"]
            for attr in self.attributes:
                t = self.attributes[attr]["type"]
                assert t in Ashuku.types
            self.units = {attr: self.attributes[attr].get("unit", "") 
                          for attr in self.attributes}
            self.optional = {attr: self.attributes[attr].get("optional", False) 
                             for attr in self.attributes}
            self.alias = {attr: self.attributes[attr].get("alias", "") 
                          for attr in self.attributes}

            self.settings = config["settings"]
            
            self.data_path = os.path.expanduser(self.settings["path"])
        except KeyError as err:
            print("Error: Config incomplete: {} missing.".format(err))
            sys.exit(1)
        except AssertionError:
            print("Error: Config malformed. Invalid type for attribute '{}'.".format(attr))
            sys.exit(1)

        # optional stuff
        # what to show instead of an empty cell
        self.empty_cell = self.settings.get("empty cell", "-")
        # what units to use when showing time
        self.time_units = {"hour": self.settings.get("hour", "h"), 
                           "min" : self.settings.get("min", "m"), 
                           "sec" : self.settings.get("sec", "s")}
        # date format, must be unique for every day (otherwise arbitrary)
        self.date_fmt = self.settings.get("date format", "%Y/%m/%d")
        
        # cached dates
        today = datetime.today()
        now = datetime.now()
        self.today = datetime(today.year, today.month, today.day)
        self.now = now.replace(microsecond=0)

        self.data_dir = os.path.dirname(self.data_path) 
        if not os.path.exists(self.data_dir):
            print("Warning: Directory {} doesn't exist. Creating it for you.".format(
                  self.data_dir))
            os.mkdir(self.data_dir)
            
        if not os.path.exists(self.data_path):
            print("Warning: Data file {} doesn't exist. Creating it for you.".format(
                  self.data_path))
            f = open(self.data_path, "w")
            f.close()
        
        with open(self.data_path, "r") as f:
            self.data = yaml.load(f, Loader=Loader) or {}

    def parse_command(self, args):
        if len(args) > 1:
            command = args[1]
        else:
            command = "show"

        command = self.unique_completion(command, Ashuku.commands)

        if command == "add":
            self.add(args[2:])
        elif command == "correlate":
            self.correlate(args[2:])
        elif command == "graph":
            self.graph(args[2:])
        elif command == "show":
            self.show(args[2:])
        elif command == "undo":
            self.undo()
        else:
            print("Error: Invalid command {}.".format(command))
            sys.exit(1)

    def read_config(self, path):
        path = os.path.expanduser(path)
        try:
            f = open(path, "r")
        except IOError as err:
            print("Couldn't open config. Trying to create {} for you. Modify to your liking.".format(
                  path))
            f = open(path, "w")
            f.write('---\n'
                    '# Each attribute must be of one of the following types:\n'
                    '# - qualitative (range from -2 to +2)\n'
                    '# - quantitative\n'
                    '# - cumulative (like quantitative, but all daily values are added up)\n'
                    '#\n'
                    '# All quantitative types also take the optional property "unit". When given, it\n'
                    '# will also be optional for input, so that "ashuku add weight 78" and\n'
                    '# "ashuku add weight 78kg" are identical.\n'
                    '# The value "time" is used for the format XhYmZs, as in 3h20m10s. When no unit\n'
                    '# is given, then minutes are assumed.\n'
                    '#\n'
                    '# You can also specify an alias via "alias". The normal name will be used for\n'
                    '# the output, but it may be inconvenient to type.\n'
                    '\n'
                    'attributes:\n'
                    '    happiness:\n'
                    '        type: qualitative\n'
                    '    sleep:\n'
                    '        type: cumulative\n'
                    '        unit: time\n'
                    '    weight:\n'
                    '        type: quantitative\n'
                    '        unit: kg\n'
                    '    日本語:\n'
                    '        type: cumulative\n'
                    '        unit: time\n'
                    '        alias: japanese\n'
                    '\n'
                    'settings:\n'
                    '    path: ~/txt/ashuku.txt\n'
                    '...')
            sys.exit(1)

        else:
            config = yaml.load(f, Loader=Loader)
        finally:
            f.close()
        return config

    def uni_len(self, s):
        "Returns the real lenght of a string wrt half-width and full-width."
        try:
            l = Ashuku.length[s]
        except KeyError:
            l = 0
            for c in s:
                if unicodedata.east_asian_width(c) == "W":
                    l += 2
                else:
                    l += 1
            Ashuku.length[s] = l
        return l

    def add(self, args):
        write = bool(args)

        while args:   
            try:
                key = args.pop(0)
                value = args.pop(0)
                if value == "":
                    raise ValueError
            except (IndexError, ValueError):
                print("Error: Missing value for '{}'.".format(key))
                print("No changes written.")
                sys.exit(1)
            key = self.unique_completion(key, self.attributes)
           
            # some sanity checks
            if self.attributes[key]["type"] == "qualitative":
                try:
                    value = int(value)
                    if value > 2 or value < -2:
                        raise ValueError
                except (ValueError, TypeError):
                    print("Error: Score for '{}' must be in -2..+2.".format(key))
                    print("No changes written.")
                    sys.exit(1)
            else:
                if self.units[key] == "time":
                    if not self.time_re.match(value):
                        print("Error: Invalid time format. Must be XhYmZs, was '{}'.".format(value))
                        print("No changes written.")
                        sys.exit(1)
                elif self.is_int(value):
                    value = int(value)
                elif self.is_float(value):
                    value = float(value)
                else:
                    print("Error: Score for '{}' must be a number.".format(key))
                    print("No changes written.")
                    sys.exit(1)
            
            # let's add it
            try:
                self.data[self.now].append( {key: value} )
            except KeyError:
                self.data[self.now] = [ {key: value} ]
            if self.units[key] != "time":
                value = "{}{}".format(value, self.units[key])
            print("Adding:", key, value)

        if write:
            self.write_data()
        
        missing = self.missing(self.today)
        if missing:
            print("Missing:", ", ".join(sorted(missing)))

    def missing(self, date):
        # return missing scores for date
        table_data = self.parse_data(date=date)
        day = date.strftime(self.date_fmt)
        already_answered = set(table_data.get(day, []))
        return [key for key in self.attributes 
                if (key not in already_answered and not self.optional[key])]

    def is_int(self, x):
        try: 
            return (int(x), True)[1]
        except (ValueError, TypeError):
            return False

    def is_float(self, x):
        try: 
            return (float(x), True)[1]
        except (ValueError, TypeError):
            return False
    def correlate(self, args):
        try:
            days = int(args[0])
            args = args[1:]
        except (ValueError, IndexError, TypeError):
            days = -1
        
        table_data = self.parse_data(days)
        keys = sorted(self.attributes.keys())
        print("linear correlations:")
        correlations = []
        for i in range(0, len(keys)):
            for j in range(i+1, len(keys)):
                r, a, b = 0, keys[i], keys[j]
                # Pearson product-moment correlation coefficent,
                # taken from Wikipedia :)
                sx = sy = sxx = syy = sxy = n = 0
                for day in table_data:
                    # get all complete pairs
                    if self.attributes[a]["type"] == "cumulative" and days > 0:
                        x = table_data[day].get(a, 0)
                    else:
                        try:
                            x = table_data[day][a]
                        except KeyError:
                            continue
                    if self.attributes[b]["type"] == "cumulative" and days > 0:
                        y = table_data[day].get(b, 0)
                    else:
                        try:
                            y = table_data[day][b]
                        except KeyError:
                            continue
                    
                    n += 1
                    sxy += x*y
                    sx += x
                    sy += y
                    sxx += x*x
                    syy += y*y
                try:
                    r = ((n*sxy - sx*sy) / 
                         (math.sqrt(n*sxx - sx*sx) * math.sqrt(n*syy - sy*sy)))
                except ZeroDivisionError:
                    r = 0
                if n:
                    correlations.append( (r, n, a, b) )
        
        for (r, n, a, b) in sorted(correlations, 
                                   key=lambda x: abs(x[0]),
                                   reverse=True):
            print("{:+0.2f} (n={}): {} <-> {}".format(r, n, a, b))
                
    def graph(self, args):
        # try to parse first argument as days
        try:
            days = int(args[0])
            args = args[1:]
        except (ValueError, IndexError, TypeError):
            days = 14
        
        # throw away all attributes we don't wanna show
        self.filter_attributes(args)
        
        # nothing to show
        if not self.attributes:
            return
        
        keys = sorted(self.attributes.keys())
        table_data = self.parse_data(days=days)

        # header
        print(",".join(keys))
        
        # body
        for d in reversed(range(days)):
            day = (self.today - timedelta(days=d)).strftime(self.date_fmt)
            line = []
            for key in keys:
                str = value = None
                try:
                    value = table_data[day][key]
                    if self.units[key] == "time":
                        str = self.format_time(value, graph=True)
                    else:
                        str = "{}".format(value)
                except KeyError:
                    str = ""
                line.append(str)
            print(",".join(line))


    def undo(self):
        keys = sorted(self.data.keys())
        try:
            undo_key = keys[-1]
        except IndexError:
            print("No data left; doing nothing.")
            sys.exit(0)
        else:
            print("Undoing {}:".format(undo_key))
            for pairs in self.data[undo_key]:
                for k, v in pairs.items():
                    print("->", k, v)
            del(self.data[undo_key])
            self.write_data()

    def write_data(self):
        try:
            f = tempfile.NamedTemporaryFile(mode="w+", 
                                            prefix=".ashuku_",
                                            suffix=".tmp", 
                                            delete=False,
                                            dir=self.data_dir)
        except IOError:
            print("Error: Couldn't write temporary file.")
            sys.exit(1)
        else:
            f.write(yaml.dump(self.data, 
                              Dumper=Dumper, 
                              allow_unicode=True,
                              default_flow_style=False))
            f.close()
            shutil.move(f.name, self.data_path)

    def show(self, args):
        # parse first numerical argument as days
        days = 14
        for i, a in enumerate(args):
            try:
                days = int(a)
                args = args[:i] + args[(i+1):]
                break
            except (ValueError, IndexError, TypeError):
                continue
        
        # throw away all attributes we don't wanna show
        self.filter_attributes(args)

        # nothing to show
        if not self.attributes:
            return

        # commence building table!
        keys = sorted(self.attributes.keys())
        table_data = self.parse_data(days=days)
        col_width = self.parse_col_width(table_data, keys)

        # print header
        header = " " * (self.uni_len(self.today.strftime(self.date_fmt)) + 1)
        header_div = "-" * self.uni_len(header)
        for key in keys:
            key_width = self.uni_len(key)
            header += " | " + self.uni_center(key, col_width[key])
            header_div += "-+-" + ("-" * col_width[key])
        print(header)
        print(header_div)

        # print body
        for d in reversed(range(days)):
            day = (self.today - timedelta(days=d)).strftime(self.date_fmt)
            line = " " + day
            for key in keys:
                line += " | "
                str = value = None
                try:
                    value = table_data[day][key]
                    if self.attributes[key]["type"] == "qualitative":
                        # I don't like +0 :)
                        if value == 0:
                            str = " 0"
                        else:
                            str = "{:+d}".format(value)
                    else:
                        if self.units[key] == "time":
                            str = self.format_time(value)
                        else:
                            str = "{}{}".format(value, self.units[key])
                except KeyError:
                    str = self.empty_cell
                line += " " * (col_width[key] - self.uni_len(str))
                line += self.colorize(value, key, str)
            print(line)

    def uni_center(self, str, width):
        "Like string.center(), but understands full-width characters."
        l = self.uni_len(str)
        rest = width - l
        if rest > 0:
            left = rest // 2
            right = rest - left
            str = " "*left + str + " "*right
        return str
    def colorize(self, value, key, str):
        # the behaviour here is somewhat personalized, so you might want to
        # adapt it to your needs
        color = "none"
        if value != None:
            if self.attributes[key]["type"] == "qualitative":
                if value > 0:
                    color = "light_green"
                elif value < 0:
                    color = "light_red"
            elif self.units[key] == "time":
                if value < (60*60):
                    color = "light_grey"
        else:
            color = "red"
        return colors[color] + str + colors["reset"]

    def filter_attributes(self, args):
        # all attributes that are not shown
        neg_filter = {a[1:] for a in args if a.startswith("-")}
        # if not empty, show only those attributes
        pos_filter = {a for a in args if not a.startswith("-")}

        for f in neg_filter:
            attrs = list(self.attributes)
            for attr in attrs:
                if (attr.startswith(f) 
                    or self.alias[attr].startswith(f)):
                    del(self.attributes[attr])
        
        if pos_filter:
            attrs = list(self.attributes)
            new_attrs = set()
            for f in pos_filter:
                for attr in attrs:
                    if (attr.startswith(f) 
                        or self.alias[attr].startswith(f)):
                        new_attrs.add(attr)

            for attr in attrs:
                if attr not in new_attrs:
                    del(self.attributes[attr])
    def unique_completion(self, candidate, targets):
        matches = []
        cl = candidate.lower()
        for t in targets:
            tl = t.lower()
            alias = self.alias.get(t, "").lower()
            if (tl.startswith(candidate) 
                or alias.startswith(candidate)):
                matches.append(t)
        
        if len(matches) == 0:
            print("Error: No match found for '{}'.".format(candidate))
            sys.exit(1)
        elif len(matches) > 1:
            print("Error: '{}' could match multiple targets: {}.".format(candidate,
                                                                         targets))
            sys.exit(1)
        else:
            return matches[0]

    def parse_col_width(self, table_data, keys):
        col_width = {}
        for key in keys:
            if self.attributes[key]["type"] == "qualitative":
                col_width[key] = max(2, self.uni_len(key))
            else:
                widths = []
                for day in table_data:
                    try:
                        if self.units[key] == "time":
                            v = table_data[day][key]
                            str = self.format_time(v)
                        else:
                            str = "{}{}".format(table_data[day][key], 
                                                self.units[key])
                        widths.append(self.uni_len(str))
                    except KeyError:
                        widths.append(self.uni_len(self.empty_cell))

                col_width[key] = max(max(widths), self.uni_len(key))
        return col_width


    def parse_data(self, days=-1, date=None):
        table = {}
        if date:
            shown_dates = [d for d in self.data if (date - d).days < 1]
        elif days == -1:
            shown_dates = self.data
        else:
            shown_dates = [d for d in self.data if (self.today - d).days < days - 1]

        for date in sorted(shown_dates):              
            # I'm honestly not sure if I should just keep the timezone as it is
            # or if I should try to adjust it. I'll keep it as-is for now.
            day = date.strftime(self.date_fmt)
            for pair in self.data[date]:
                for (attr, value) in pair.items():
                    if not attr in self.attributes:
                        continue
                    try:
                        td = table[day]
                        if self.attributes[attr]["type"] == "cumulative":
                            old_value = table[day].get(attr, 0)
                            
                            if self.units[attr] == "time":
                                value = self.parse_time(value)
                            
                            value += old_value

                        table[day][attr] = value
                    except KeyError:
                        if self.units[attr] == "time":
                            value = self.parse_time(value)
                        table[day] = {attr: value}

        return table

    def parse_time(self, value):
        try:
            m = Ashuku.time_re.match(value)
            hour, min, sec = m.group("hour", "min", "sec")
        except AttributeError:
            print("Error: Invalid time format. Must be XhYmZs, was '{}'.".format(value))
            sys.exit(1)
        hour = int(hour or "0")
        min = int(min or "0")
        sec = int(sec or "0")
        return hour * 3600 + min * 60 + sec
                            
    def format_time(self, value, graph=False):
        s = value % 60
        m = value // 60 % 60
        h = value // (60 * 60)
        str = ""
        if graph:
            str = "{:d}:{:02d}:{:02d}".format(h, m, s)
        else:
            if h:
                str += "{}{}".format(h, self.time_units["hour"]) 
            if m:
                str += "{}{}".format(m, self.time_units["min"]) 
            if s:
                str += "{}{}".format(s, self.time_units["sec"]) 
        return str

def main(args):
    A = Ashuku("~/.ashuku")
    A.parse_command(args)

if __name__ == "__main__":
    if PROFILE:
        profile.run("main(sys.argv)", "profile.log")
        p = pstats.Stats("profile.log")
        p.sort_stats("time").print_stats(.5)
    else:
        main(sys.argv)
